<?php

/**
 * BaseAmGroupAccess
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property Doctrine_Collection $AmGroup
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getDescription() Returns the current record's "description" value
 * @method Doctrine_Collection getAmGroup()     Returns the current record's "AmGroup" collection
 * @method AmGroupAccess       setId()          Sets the current record's "id" value
 * @method AmGroupAccess       setName()        Sets the current record's "name" value
 * @method AmGroupAccess       setDescription() Sets the current record's "description" value
 * @method AmGroupAccess       setAmGroup()     Sets the current record's "AmGroup" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Mipo Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAmGroupAccess extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('am_group_access');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('AmGroup', array(
             'local' => 'id',
             'foreign' => 'access_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}