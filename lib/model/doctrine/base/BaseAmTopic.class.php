<?php

/**
 * BaseAmTopic
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $body
 * @property integer $group_id
 * @property integer $user_id
 * @property string $relevance_year
 * @property integer $like_count
 * @property integer $dislike_count
 * @property integer $access_id
 * @property boolean $is_blocked
 * @property AmGroup $AmGroup
 * @property Doctrine_Collection $AmPosts
 * 
 * @method string              getName()           Returns the current record's "name" value
 * @method string              getBody()           Returns the current record's "body" value
 * @method integer             getGroupId()        Returns the current record's "group_id" value
 * @method integer             getUserId()         Returns the current record's "user_id" value
 * @method string              getRelevanceYear()  Returns the current record's "relevance_year" value
 * @method integer             getLikeCount()      Returns the current record's "like_count" value
 * @method integer             getDislikeCount()   Returns the current record's "dislike_count" value
 * @method integer             getAccessId()       Returns the current record's "access_id" value
 * @method boolean             getIsBlocked()      Returns the current record's "is_blocked" value
 * @method AmGroup             getAmGroup()        Returns the current record's "AmGroup" value
 * @method Doctrine_Collection getAmPosts()        Returns the current record's "AmPosts" collection
 * @method AmTopic             setName()           Sets the current record's "name" value
 * @method AmTopic             setBody()           Sets the current record's "body" value
 * @method AmTopic             setGroupId()        Sets the current record's "group_id" value
 * @method AmTopic             setUserId()         Sets the current record's "user_id" value
 * @method AmTopic             setRelevanceYear()  Sets the current record's "relevance_year" value
 * @method AmTopic             setLikeCount()      Sets the current record's "like_count" value
 * @method AmTopic             setDislikeCount()   Sets the current record's "dislike_count" value
 * @method AmTopic             setAccessId()       Sets the current record's "access_id" value
 * @method AmTopic             setIsBlocked()      Sets the current record's "is_blocked" value
 * @method AmTopic             setAmGroup()        Sets the current record's "AmGroup" value
 * @method AmTopic             setAmPosts()        Sets the current record's "AmPosts" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Mipo Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAmTopic extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('am_topic');
        $this->hasColumn('name', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 200,
             ));
        $this->hasColumn('body', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('group_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('relevance_year', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             ));
        $this->hasColumn('like_count', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('dislike_count', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('access_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('is_blocked', 'boolean', null, array(
             'type' => 'boolean',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('AmGroup', array(
             'local' => 'group_id',
             'foreign' => 'id'));

        $this->hasMany('AmPost as AmPosts', array(
             'local' => 'id',
             'foreign' => 'topic_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}