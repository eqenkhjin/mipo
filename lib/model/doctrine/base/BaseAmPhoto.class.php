<?php

/**
 * BaseAmPhoto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $album_id
 * @property string $image
 * @property string $small_image
 * @property string $large_image
 * @property integer $like_count
 * @property integer $dislike_count
 * @property integer $user_id
 * @property integer $sort_order
 * @property boolean $is_blocked
 * @property AmPhotoAlbum $AmPhotoAlbum
 * @property AmUser $AmUser
 * 
 * @method string       getName()          Returns the current record's "name" value
 * @method integer      getAlbumId()       Returns the current record's "album_id" value
 * @method string       getImage()         Returns the current record's "image" value
 * @method string       getSmallImage()    Returns the current record's "small_image" value
 * @method string       getLargeImage()    Returns the current record's "large_image" value
 * @method integer      getLikeCount()     Returns the current record's "like_count" value
 * @method integer      getDislikeCount()  Returns the current record's "dislike_count" value
 * @method integer      getUserId()        Returns the current record's "user_id" value
 * @method integer      getSortOrder()     Returns the current record's "sort_order" value
 * @method boolean      getIsBlocked()     Returns the current record's "is_blocked" value
 * @method AmPhotoAlbum getAmPhotoAlbum()  Returns the current record's "AmPhotoAlbum" value
 * @method AmUser       getAmUser()        Returns the current record's "AmUser" value
 * @method AmPhoto      setName()          Sets the current record's "name" value
 * @method AmPhoto      setAlbumId()       Sets the current record's "album_id" value
 * @method AmPhoto      setImage()         Sets the current record's "image" value
 * @method AmPhoto      setSmallImage()    Sets the current record's "small_image" value
 * @method AmPhoto      setLargeImage()    Sets the current record's "large_image" value
 * @method AmPhoto      setLikeCount()     Sets the current record's "like_count" value
 * @method AmPhoto      setDislikeCount()  Sets the current record's "dislike_count" value
 * @method AmPhoto      setUserId()        Sets the current record's "user_id" value
 * @method AmPhoto      setSortOrder()     Sets the current record's "sort_order" value
 * @method AmPhoto      setIsBlocked()     Sets the current record's "is_blocked" value
 * @method AmPhoto      setAmPhotoAlbum()  Sets the current record's "AmPhotoAlbum" value
 * @method AmPhoto      setAmUser()        Sets the current record's "AmUser" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Mipo Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAmPhoto extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('am_photo');
        $this->hasColumn('name', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 200,
             ));
        $this->hasColumn('album_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('image', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('small_image', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('large_image', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('like_count', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('dislike_count', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('sort_order', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             ));
        $this->hasColumn('is_blocked', 'boolean', null, array(
             'type' => 'boolean',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('AmPhotoAlbum', array(
             'local' => 'album_id',
             'foreign' => 'id'));

        $this->hasOne('AmUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}