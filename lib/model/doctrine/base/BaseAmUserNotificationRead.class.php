<?php

/**
 * BaseAmUserNotificationRead
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $activity_id
 * @property timestamp $viewed_date
 * @property boolean $is_read
 * @property AmUser $AmUser
 * @property AmActivityLog $AmActivityLog
 * 
 * @method integer                getUserId()        Returns the current record's "user_id" value
 * @method integer                getActivityId()    Returns the current record's "activity_id" value
 * @method timestamp              getViewedDate()    Returns the current record's "viewed_date" value
 * @method boolean                getIsRead()        Returns the current record's "is_read" value
 * @method AmUser                 getAmUser()        Returns the current record's "AmUser" value
 * @method AmActivityLog          getAmActivityLog() Returns the current record's "AmActivityLog" value
 * @method AmUserNotificationRead setUserId()        Sets the current record's "user_id" value
 * @method AmUserNotificationRead setActivityId()    Sets the current record's "activity_id" value
 * @method AmUserNotificationRead setViewedDate()    Sets the current record's "viewed_date" value
 * @method AmUserNotificationRead setIsRead()        Sets the current record's "is_read" value
 * @method AmUserNotificationRead setAmUser()        Sets the current record's "AmUser" value
 * @method AmUserNotificationRead setAmActivityLog() Sets the current record's "AmActivityLog" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Mipo Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAmUserNotificationRead extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('am_user_notification_read');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('activity_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('viewed_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('is_read', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('AmUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('AmActivityLog', array(
             'local' => 'activity_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}