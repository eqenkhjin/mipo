<?php

/**
 * BaseAmUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $email
 * @property string $firstname
 * @property string $lastname
 * @property string $username
 * @property string $display_name
 * @property string $salt
 * @property string $algorithm
 * @property string $password
 * @property string $token
 * @property string $user_type
 * @property boolean $is_web
 * @property boolean $is_facebook
 * @property boolean $is_active
 * @property enum $gender
 * @property string $facebook_id
 * @property string $about_me
 * @property string $avatar
 * @property string $small_avatar
 * @property string $large_avatar
 * @property string $mgl_avatar
 * @property string $mgl_small_avatar
 * @property string $mgl_large_avatar
 * @property timestamp $rregistered_at
 * @property boolean $verified
 * @property Doctrine_Collection $AmGroups
 * @property Doctrine_Collection $AmThreads
 * @property Doctrine_Collection $AmMessages
 * @property Doctrine_Collection $AmForgotPassword
 * @property Doctrine_Collection $AmRememberKey
 * @property Doctrine_Collection $AmUserEducations
 * @property Doctrine_Collection $AmJobExperiences
 * @property Doctrine_Collection $AmLoginHistories
 * @property Doctrine_Collection $AmUserToUser
 * @property Doctrine_Collection $AmUserRelationList
 * @property Doctrine_Collection $AmFriendRequest
 * @property AmGroupUserConn $AmGroupUserConn
 * @property Doctrine_Collection $AmActivityLogs
 * @property Doctrine_Collection $AmUserNotifications
 * @property Doctrine_Collection $AmPosts
 * @property Doctrine_Collection $AmPhotoAlbums
 * @property Doctrine_Collection $AmPhotos
 * @property Doctrine_Collection $AmVideos
 * @property Doctrine_Collection $AmComments
 * @property Doctrine_Collection $AmMailboxs
 * @property AmUserThreadConn $AmUserThreadConn
 * @property AmUserMessageConn $AmUserMessageConn
 * @property Doctrine_Collection $AmShopCategoryGroupConn
 * @property Doctrine_Collection $AmShopProducts
 * 
 * @method integer             getId()                      Returns the current record's "id" value
 * @method string              getEmail()                   Returns the current record's "email" value
 * @method string              getFirstname()               Returns the current record's "firstname" value
 * @method string              getLastname()                Returns the current record's "lastname" value
 * @method string              getUsername()                Returns the current record's "username" value
 * @method string              getDisplayName()             Returns the current record's "display_name" value
 * @method string              getSalt()                    Returns the current record's "salt" value
 * @method string              getAlgorithm()               Returns the current record's "algorithm" value
 * @method string              getPassword()                Returns the current record's "password" value
 * @method string              getToken()                   Returns the current record's "token" value
 * @method string              getUserType()                Returns the current record's "user_type" value
 * @method boolean             getIsWeb()                   Returns the current record's "is_web" value
 * @method boolean             getIsFacebook()              Returns the current record's "is_facebook" value
 * @method boolean             getIsActive()                Returns the current record's "is_active" value
 * @method enum                getGender()                  Returns the current record's "gender" value
 * @method string              getFacebookId()              Returns the current record's "facebook_id" value
 * @method string              getAboutMe()                 Returns the current record's "about_me" value
 * @method string              getAvatar()                  Returns the current record's "avatar" value
 * @method string              getSmallAvatar()             Returns the current record's "small_avatar" value
 * @method string              getLargeAvatar()             Returns the current record's "large_avatar" value
 * @method string              getMglAvatar()               Returns the current record's "mgl_avatar" value
 * @method string              getMglSmallAvatar()          Returns the current record's "mgl_small_avatar" value
 * @method string              getMglLargeAvatar()          Returns the current record's "mgl_large_avatar" value
 * @method timestamp           getRregisteredAt()           Returns the current record's "rregistered_at" value
 * @method boolean             getVerified()                Returns the current record's "verified" value
 * @method Doctrine_Collection getAmGroups()                Returns the current record's "AmGroups" collection
 * @method Doctrine_Collection getAmThreads()               Returns the current record's "AmThreads" collection
 * @method Doctrine_Collection getAmMessages()              Returns the current record's "AmMessages" collection
 * @method Doctrine_Collection getAmForgotPassword()        Returns the current record's "AmForgotPassword" collection
 * @method Doctrine_Collection getAmRememberKey()           Returns the current record's "AmRememberKey" collection
 * @method Doctrine_Collection getAmUserEducations()        Returns the current record's "AmUserEducations" collection
 * @method Doctrine_Collection getAmJobExperiences()        Returns the current record's "AmJobExperiences" collection
 * @method Doctrine_Collection getAmLoginHistories()        Returns the current record's "AmLoginHistories" collection
 * @method Doctrine_Collection getAmUserToUser()            Returns the current record's "AmUserToUser" collection
 * @method Doctrine_Collection getAmUserRelationList()      Returns the current record's "AmUserRelationList" collection
 * @method Doctrine_Collection getAmFriendRequest()         Returns the current record's "AmFriendRequest" collection
 * @method AmGroupUserConn     getAmGroupUserConn()         Returns the current record's "AmGroupUserConn" value
 * @method Doctrine_Collection getAmActivityLogs()          Returns the current record's "AmActivityLogs" collection
 * @method Doctrine_Collection getAmUserNotifications()     Returns the current record's "AmUserNotifications" collection
 * @method Doctrine_Collection getAmPosts()                 Returns the current record's "AmPosts" collection
 * @method Doctrine_Collection getAmPhotoAlbums()           Returns the current record's "AmPhotoAlbums" collection
 * @method Doctrine_Collection getAmPhotos()                Returns the current record's "AmPhotos" collection
 * @method Doctrine_Collection getAmVideos()                Returns the current record's "AmVideos" collection
 * @method Doctrine_Collection getAmComments()              Returns the current record's "AmComments" collection
 * @method Doctrine_Collection getAmMailboxs()              Returns the current record's "AmMailboxs" collection
 * @method AmUserThreadConn    getAmUserThreadConn()        Returns the current record's "AmUserThreadConn" value
 * @method AmUserMessageConn   getAmUserMessageConn()       Returns the current record's "AmUserMessageConn" value
 * @method Doctrine_Collection getAmShopCategoryGroupConn() Returns the current record's "AmShopCategoryGroupConn" collection
 * @method Doctrine_Collection getAmShopProducts()          Returns the current record's "AmShopProducts" collection
 * @method AmUser              setId()                      Sets the current record's "id" value
 * @method AmUser              setEmail()                   Sets the current record's "email" value
 * @method AmUser              setFirstname()               Sets the current record's "firstname" value
 * @method AmUser              setLastname()                Sets the current record's "lastname" value
 * @method AmUser              setUsername()                Sets the current record's "username" value
 * @method AmUser              setDisplayName()             Sets the current record's "display_name" value
 * @method AmUser              setSalt()                    Sets the current record's "salt" value
 * @method AmUser              setAlgorithm()               Sets the current record's "algorithm" value
 * @method AmUser              setPassword()                Sets the current record's "password" value
 * @method AmUser              setToken()                   Sets the current record's "token" value
 * @method AmUser              setUserType()                Sets the current record's "user_type" value
 * @method AmUser              setIsWeb()                   Sets the current record's "is_web" value
 * @method AmUser              setIsFacebook()              Sets the current record's "is_facebook" value
 * @method AmUser              setIsActive()                Sets the current record's "is_active" value
 * @method AmUser              setGender()                  Sets the current record's "gender" value
 * @method AmUser              setFacebookId()              Sets the current record's "facebook_id" value
 * @method AmUser              setAboutMe()                 Sets the current record's "about_me" value
 * @method AmUser              setAvatar()                  Sets the current record's "avatar" value
 * @method AmUser              setSmallAvatar()             Sets the current record's "small_avatar" value
 * @method AmUser              setLargeAvatar()             Sets the current record's "large_avatar" value
 * @method AmUser              setMglAvatar()               Sets the current record's "mgl_avatar" value
 * @method AmUser              setMglSmallAvatar()          Sets the current record's "mgl_small_avatar" value
 * @method AmUser              setMglLargeAvatar()          Sets the current record's "mgl_large_avatar" value
 * @method AmUser              setRregisteredAt()           Sets the current record's "rregistered_at" value
 * @method AmUser              setVerified()                Sets the current record's "verified" value
 * @method AmUser              setAmGroups()                Sets the current record's "AmGroups" collection
 * @method AmUser              setAmThreads()               Sets the current record's "AmThreads" collection
 * @method AmUser              setAmMessages()              Sets the current record's "AmMessages" collection
 * @method AmUser              setAmForgotPassword()        Sets the current record's "AmForgotPassword" collection
 * @method AmUser              setAmRememberKey()           Sets the current record's "AmRememberKey" collection
 * @method AmUser              setAmUserEducations()        Sets the current record's "AmUserEducations" collection
 * @method AmUser              setAmJobExperiences()        Sets the current record's "AmJobExperiences" collection
 * @method AmUser              setAmLoginHistories()        Sets the current record's "AmLoginHistories" collection
 * @method AmUser              setAmUserToUser()            Sets the current record's "AmUserToUser" collection
 * @method AmUser              setAmUserRelationList()      Sets the current record's "AmUserRelationList" collection
 * @method AmUser              setAmFriendRequest()         Sets the current record's "AmFriendRequest" collection
 * @method AmUser              setAmGroupUserConn()         Sets the current record's "AmGroupUserConn" value
 * @method AmUser              setAmActivityLogs()          Sets the current record's "AmActivityLogs" collection
 * @method AmUser              setAmUserNotifications()     Sets the current record's "AmUserNotifications" collection
 * @method AmUser              setAmPosts()                 Sets the current record's "AmPosts" collection
 * @method AmUser              setAmPhotoAlbums()           Sets the current record's "AmPhotoAlbums" collection
 * @method AmUser              setAmPhotos()                Sets the current record's "AmPhotos" collection
 * @method AmUser              setAmVideos()                Sets the current record's "AmVideos" collection
 * @method AmUser              setAmComments()              Sets the current record's "AmComments" collection
 * @method AmUser              setAmMailboxs()              Sets the current record's "AmMailboxs" collection
 * @method AmUser              setAmUserThreadConn()        Sets the current record's "AmUserThreadConn" value
 * @method AmUser              setAmUserMessageConn()       Sets the current record's "AmUserMessageConn" value
 * @method AmUser              setAmShopCategoryGroupConn() Sets the current record's "AmShopCategoryGroupConn" collection
 * @method AmUser              setAmShopProducts()          Sets the current record's "AmShopProducts" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Mipo Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAmUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('am_user');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('firstname', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('lastname', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('display_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('salt', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'default' => 'sha1',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('token', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('user_type', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('is_web', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('is_facebook', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('gender', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'none',
              1 => 'female',
              2 => 'male',
             ),
             ));
        $this->hasColumn('facebook_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('about_me', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('avatar', 'string', 255, array(
             'type' => 'string',
             'default' => '/images/no-profile.jpg',
             'length' => 255,
             ));
        $this->hasColumn('small_avatar', 'string', 255, array(
             'type' => 'string',
             'default' => '/images/no-profile-small.jpg',
             'length' => 255,
             ));
        $this->hasColumn('large_avatar', 'string', 255, array(
             'type' => 'string',
             'default' => '/images/no-profile.jpeg',
             'length' => 255,
             ));
        $this->hasColumn('mgl_avatar', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('mgl_small_avatar', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('mgl_large_avatar', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('rregistered_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('verified', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('AmGroup as AmGroups', array(
             'refClass' => 'AmGroupUserConn',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('AmThread as AmThreads', array(
             'refClass' => 'AmUserThreadConn',
             'local' => 'user_id',
             'foreign' => 'thread_id'));

        $this->hasMany('AmMessage as AmMessages', array(
             'refClass' => 'AmUserMessageConn',
             'local' => 'user_id',
             'foreign' => 'message_id'));

        $this->hasMany('AmForgotPassword', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmRememberKey', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmUserEducation as AmUserEducations', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmJobExperience as AmJobExperiences', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmLoginHistory as AmLoginHistories', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmUserToUser', array(
             'local' => 'id',
             'foreign' => 'user_2'));

        $this->hasMany('AmUserRelationList', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmFriendRequest', array(
             'local' => 'id',
             'foreign' => 'receiver_id'));

        $this->hasOne('AmGroupUserConn', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmActivityLog as AmActivityLogs', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmUserNotificationRead as AmUserNotifications', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmPost as AmPosts', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmPhotoAlbum as AmPhotoAlbums', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmPhoto as AmPhotos', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmVideo as AmVideos', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmComment as AmComments', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmMailbox as AmMailboxs', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('AmUserThreadConn', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('AmUserMessageConn', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AmShopCategoryGroupConn', array(
             'local' => 'id',
             'foreign' => 'created_user_id'));

        $this->hasMany('AmShopProduct as AmShopProducts', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}