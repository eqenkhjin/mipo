<?php

/**
 * BaseAmThread
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $created_user_id
 * @property integer $user_count
 * @property Doctrine_Collection $AmUsers
 * @property AmUserThreadConn $AmUserThreadConn
 * 
 * @method integer             getCreatedUserId()    Returns the current record's "created_user_id" value
 * @method integer             getUserCount()        Returns the current record's "user_count" value
 * @method Doctrine_Collection getAmUsers()          Returns the current record's "AmUsers" collection
 * @method AmUserThreadConn    getAmUserThreadConn() Returns the current record's "AmUserThreadConn" value
 * @method AmThread            setCreatedUserId()    Sets the current record's "created_user_id" value
 * @method AmThread            setUserCount()        Sets the current record's "user_count" value
 * @method AmThread            setAmUsers()          Sets the current record's "AmUsers" collection
 * @method AmThread            setAmUserThreadConn() Sets the current record's "AmUserThreadConn" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Mipo Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAmThread extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('am_thread');
        $this->hasColumn('created_user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 2,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('AmUser as AmUsers', array(
             'refClass' => 'AmUserThreadConn',
             'local' => 'thread_id',
             'foreign' => 'user_id'));

        $this->hasOne('AmUserThreadConn', array(
             'local' => 'id',
             'foreign' => 'thread_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}