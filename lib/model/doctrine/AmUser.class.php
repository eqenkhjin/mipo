<?php

/**
 * AmUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AmUser extends BaseAmUser
{
  public function isMyFriend($user_id = 0)
  {
      if($user_id == 0) return false;
      
      $q = AmUserToUserTable::getInstance()->createQuery();
      $q->addWhere('user_1 = ?', sfContext::getInstance()->getUser()->getId());
      $q->addWhere('user_2 = ?', $user_id);
      
      return ($q->count() > 0)?true:false;
  }
  
  
  /* Энэ хэрэглэгчи нэвтэрсэн хэрэглэгч рүү найзын хүсэлт илгээсэн */
  public function isRequestFriend($user_id = 0)
  {
      if($user_id == 0) return false;
      
      $me_id = sfContext::getInstance()->getUser()->getId();
      
      $q = AmFriendRequestTable::getInstance()->createQuery();
      $q->addWhere('receiver_id = ?', $me_id);
      $q->addWhere('sender_id = ?', $user_id);
      
      return ($q->count() > 0)?true:false;
  }
  
  /* Нэвтэрсэн хэрэглэгч энэ хэрэглэгчрүү найзын хүсэлт илгээсэн байна */
  public function isResponseFriend($user_id = 0)
  {
      if($user_id == 0) return false;
      
      $me_id = sfContext::getInstance()->getUser()->getId();
      
      $q = AmFriendRequestTable::getInstance()->createQuery();
      $q->addWhere('receiver_id = ?', $user_id);
      $q->addWhere('sender_id = ?', $me_id);
      
      return ($q->count() > 0)?true:false;
  }
    
    
  public function setPassword($password)
  {
    if (!$password && 0 == strlen($password))
    {
      return;
    }

    if (!$salt = $this->getSalt())
    {
      $salt = md5(rand(100000, 999999).$this->getEmail());
      $this->setSalt($salt);
    }
    $modified = $this->getModified();
    if ((!$algorithm = $this->getAlgorithm()) || (isset($modified['algorithm']) && $modified['algorithm'] == $this->getTable()->getDefaultValueOf('algorithm')))
    {
      $algorithm = sfConfig::get('app_sf_guard_plugin_algorithm_callable', 'sha1');
    }
    $algorithmAsStr = is_array($algorithm) ? $algorithm[0].'::'.$algorithm[1] : $algorithm;
    if (!is_callable($algorithm))
    {
      throw new sfException(sprintf('The algorithm callable "%s" is not callable.', $algorithmAsStr));
    }
    $this->setAlgorithm($algorithmAsStr);

    $this->_set('password', call_user_func_array($algorithm, array($salt.$password)));
  }
  
  
  
  public function checkPassword($password)
  {
    $algorithm = $this->getAlgorithm();
    if (false !== $pos = strpos($algorithm, '::'))
    {
      $algorithm = array(substr($algorithm, 0, $pos), substr($algorithm, $pos + 2));
    }
    if (!is_callable($algorithm))
    {
      throw new sfException(sprintf('The algorithm callable "%s" is not callable.', $algorithm));
    }

    return $this->getPassword() == call_user_func_array($algorithm, array($this->getSalt().$password));
  }
  
  
  
  public function save(Doctrine_Connection $conn = null)
  {
    if($this->isNew()){
        if($this->getEmail())
            $this->setToken(sha1(time().$this->getEmail()));
    }
      
    return parent::save($conn);
  }
}
