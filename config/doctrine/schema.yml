#user 
AmUser:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer, primary: true, autoincrement: true }
    email:                { type: string(255), notnull: true, unique: true }
    firstname:            { type: string(100) }
    lastname:             { type: string(100) }
    username:             { type: string(255), unique: true }
    display_name:         { type: string(255) }
    salt:                 { type: string(255) }
    algorithm:            { type: string(128), default: 'sha1' }
    password:             { type: string(255), notnull: true }
    token:                { type: string(255) }
    user_type:            { type: string(50) }
    is_web:               { type: boolean, default: true }
    is_facebook:          { type: boolean, default: false }
    is_active:            { type: boolean, default: true }
    gender:               { type: enum, values: ['none', 'female', 'male'] }
    facebook_id:          { type: string(100) } 
    about_me:             { type: string(255) }
    avatar:               { type: string(255), default: '/images/no-profile.jpg' }
    small_avatar:         { type: string(255), default: '/images/no-profile-small.jpg' }
    large_avatar:         { type: string(255), default: '/images/no-profile.jpeg' }
    mgl_avatar:               { type: string(255) }
    mgl_small_avatar:         { type: string(255) }
    mgl_large_avatar:         { type: string(255) }
    rregistered_at:        { type: timestamp }  
    verified:             { type: boolean, default: false }
  relations:
    AmGroups:             { refClass: AmGroupUserConn, class: AmGroup, local: user_id, foreign: group_id }
    AmThreads:            { refClass: AmUserThreadConn, class: AmThread, local: user_id, foreign: thread_id }
    AmMessages:           { refClass: AmUserMessageConn, class: AmMessage, local: user_id, foreign: message_id }

AmForgotPassword:
  actAs:
    Timestampable: ~
  columns:
    user_id:              { type: integer, notnull: true }
    unique_key:           { type: string(255) }
    expired_at:           { type: timestamp }
  relations:
    AmUser:               { local: user_id, foreign: id }
    
AmRememberKey:
  actAs:
    Timestampable: ~
  columns:
    user_id:              { type: integer, notnull: true }
    remember_key:         { type: string(255) }
    ip_address:           { type: string(255) }
  relations:
    AmUser:               { local: user_id, foreign: id }

AmUserEducation:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer(4), primary: true, autoincrement: true }
    user_id:              { type: integer, notnull: true }
    group_id:             { type: integer }
    profession:           { type: string(100) }
    school_name:          { type: string(100) }
    start_year:           { type: integer(4) }
    education_level_id:   { type: integer(4) }
  relations:
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmUserEducations }
    AmGroup:              { local: group_id, foreign: id, foreignAlias: AmUser }
    AmEducationLevel:     { local: education_level_id }

AmEducationLevel:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer(4), primary: true, autoincrement: true }
    name:                 { type: string(100), notnull: true }
    body:                 { type: string(500) }

AmJobExperience:
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(500) }
    company_name:         { type: string(100) }
    start_date:           { type: timestamp }
    end_date:             { type: timestamp }
    ended_reason:         { type: string(255) }
    user_id:              { type: integer }
  relations:
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmJobExperiences }
    
AmLoginHistory:
  actAs:
    Timestampable: ~
  columns:
    user_id:              { type: integer, notnull: true }
    ip_address:           { type: string(50), notnull: true }
    access_type:          { type: string(50), default: 'Browser' }
  relations:
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmLoginHistories }


# friend system
AmUserRelation:
  actAs: 
    Timestampable: ~
  columns:
    id:           { type: integer(4), autoincrement: true, primary: true }
    name:         { type: string(100), notnull: true }
    parent_id:    { type: integer(4) }
  relations:
    AmUserRelation: { local: parent_id, foreign: id, foreignAlias: Parent, alias: Childs }
      
AmUserToUser:
  actAs:
    Timestampable: ~
  columns:
    user_1:       { type: integer, primary: true }
    user_2:       { type: integer, primary: true }
    join_date:    { type: timestamp }
    relation_id:  { type: integer(4) }
    is_blocked:   { type: boolean }
  relations:
    AmUser:       { local: user_1, foreign: id, alias: User1 }
    AmUser:       { local: user_2, foreign: id, alias: User2 }
    AmUserRelation: { local: relation_id, foreign: id }
   
AmUserRelationList:
  actAs:
    Timestampable: ~
  columns:
    user_id:      { type: integer, notnull: true }
    total:        { type: integer(4) }
    total_blocked: { type: integer(4) }
    total_active:  { type: integer(4) }
    relation_id:   { type: integer(4) }
  relations:
    AmUser:       { local: user_id, foreign: id }
    
AmFriendRequest:
  actAs:
    Timestampable: ~
  columns:
    sender_id:    { type: integer, notnull: true }
    receiver_id:  { type: integer, notnull: true } 
    is_accept:    { type: boolean, default: false }
    is_decline:   { type: boolean, default: false  }
    send_date:    { type: timestamp }
    received_date: { type: timestamp }
  relations:
    AmUser:       { local: sender_id, foreign: id, alias: Sender }
    AmUser:       { local: receiver_id, foreignx: id, alias: Receiver }
  
  

#group 
AmGroupType: 
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(255) }
    
AmGroupAccess:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer(4), autoincrement: true, primary: true }
    name:                 { type: string(100), notnull: true }
    description:          { type: string(255) }
    
AmGroup:
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    body:                 { type: string }
    parent_id:            { type: integer }
    gr_type_id:           { type: integer(4) }
    image:                { type: string(255) }
    small_image:          { type: string(255) }
    large_image:          { type: string(255) }
    access_id:            { type: integer(4) }  
    created_by:           { type: integer, notnull: true } 
    updated_by:           { type: integer(4) } 
  relations:
    AmGroupType:          { local: gr_type_id, foreign: id }
    AmGroup:              { local: parent_id, foreign: id, foreignAlias: AmGroupChilds, alias: AmGroupParent }
    AmUsers:              { refClass: AmGroupUserConn, class: AmUser, local: group_id, foreign: user_id }
    AmShopCategories:     { refClass: AmShopCategoryGroupConn, class: AmShopCategory, local: group_id, foreign: category_id }
    AmUser:               { local: created_by, foreign: id, alias: AmCreatedUser }
    AmGroupAccess:        { local: access_id, foreign: id }
    
AmGroupUserConn:
  actAs:
    Timestampable: ~
  columns:
    group_id:             { type: integer, primary: true } 
    user_id:              { type: integer, primary: true } 
    joined_at:            { type: timestamp }
    is_moderator:         { type: boolean, default: false }
    year1:                { type: integer(4) }
    year2:                { type: integer(4) }
    is_joined:            { type: boolean, default: false }
  relations:
    AmUser:               { local: user_id, foreignType: one }
    AmGroup:              { local: group_id, foreignType: one }
    
AmObjectType:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer(4), primary: true, autoincrement: true }
    name:                 { type: string(200), notnull: true }
    object_model_name:    { type: string(100), unique: true }
    object_table_name:    { type: string(100), unique: true }
    body:                 { type: string(255) }
    sentence_format:      { type: string(255) }
  relations:
    AmActions:            { refClass: AmObjectActionConn, class: AmAction, local: object_type_id, foreign: action_id }

AmAction:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer(4), primary: true, autoincrement: true }
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(500) }
  relations:
    AmObjectTypes:        { refClass: AmObjectActionConn, class: AmObjectType, local: action_id, foreign: object_type_id }



# ene ni neg uildeliig ilerhiilne
AmObjectActionConn:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer, autoincrement: true, primary: true }
    action_id:            { type: integer(4) }
    object_type_id:       { type: integer(4) }
    slug:                 { type: string(100), unique: true }
    sentence_format:      { type: string(255) } 
  relations:
    AmObjectType:         { local: object_type_id, foreign: id, foreignType: one }
    AmAction:             { local: action_id, foreign: id, foreignType: one }
    
AmActivityLog:
  actAs:
    Timestampable: ~
  columns:
    user_id:               { type: integer }  
    object_action_conn_id: { type: integer }
    object_type_id:        { type: integer(4) }
    object_id:             { type: integer }
    where_id:              { type: integer(4) }
    group_id:              { type: integer }
    sentence_html:         { type: string(255) }
  relations:
    AmUser:                { local: user_id, foreign: id, foreignAlias: AmActivityLogs }
    AmObjectActionConn:    { local: object_action_conn_id, foreign: id, foreignAlias: AmLogs }
    AmWhere:               { local: where_id, foreign: id, foreignAlias: AmActivityLogs }

AmWhere:
  actAs:
    Timestampable: ~
  columns:
    id:                    { type: integer(4), primary: true, autoincrement: true }
    object_type_id:        { type: integer(4) }
    object_id:             { type: integer }
    sentence_format:       { type: string(255) }
    group_id:              { type: integer }
  relations:
    AmGroup:               { local: group_id, foreign: id, foreignAlias: AmWheres }

AmUserNotificationRead:
  actAs:
    Timestampable: ~
  columns:
    user_id:              { type: integer, notnull: true }
    activity_id:          { type: integer }
    viewed_date:          { type: timestamp }
    is_read:              { type: boolean, default: false }
  relations:
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmUserNotifications }
    AmActivityLog:        { local: activity_id, foreign: id }
    


#object doorh table uud yr ni object uud ni
AmEvent:
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(500) }
    group_id:             { type: integer }
    when_date:            { type: date(25) }
    when_hour:            { type: time(25) }
    place:                { type: string(255) }
    location:             { type: string(255) }
    is_blocked:           { type: boolean }
  relations:
    AmGroup:              { local: group_id, foreign: id, foreignAlias: AmEvents }

AmTopic:
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    body:                 { type: string }
    group_id:             { type: integer, notnull: true }
    user_id:              { type: integer, notnull: true }
    relevance_year:       { type: string(10) }
    like_count:           { type: integer(4) }
    dislike_count:        { type: integer(4) }
    access_id:            { type: integer(4) }
    is_blocked:           { type: boolean }
  relations:
    AmGroup:              { local: group_id, foreign: id, foreignAlias: AmTopics }
    
AmPost:    
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    body:                 { type: string() }
    topic_id:             { type: integer }
    user_id:              { type: integer }
    like_count:           { type: integer(4), default: 0 }
    dislike_count:        { type: integer(4), default: 0 }
    is_blocked:           { type: boolean, default: 0 }
  relations:
    AmTopic:              { local: topic_id, foreign: id, foreignAlias: AmPosts }
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmPosts }

AmPhotoAlbum:
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(500) }
    group_id:             { type: integer }
    cover_photo_id:       { type: integer }
    user_id:              { type: integer }
    is_blocked:           { type: boolean }
    like_count:           { type: integer(4) }
    dislike_count:        { type: integer(4) }
    access_id:            { type: integer(4) }
  relations:
    AmGroup:              { local: group_id, foreign: id, foreignAlias: AmPhotoAlbums }  
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmPhotoAlbums }
    AmAccess:             { local: access_id, foreign: id }
    AmPhoto:              { local: cover_photo_id, foreign: id, alias: CoverPhoto }

AmPhoto:
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    album_id:             { type: integer }
    image:                { type: string(255) }
    small_image:          { type: string(255) }
    large_image:          { type: string(255) }
    like_count:           { type: integer(4) }
    dislike_count:        { type: integer(4) }
    user_id:              { type: integer }
    sort_order:           { type: integer(1) }
    is_blocked:           { type: boolean }
  relations: 
    AmPhotoAlbum:         { local: album_id, foreign: id, foreignAlias: AmPhotos }
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmPhotos }
    

# ene table der youtube vimeo eswel embed ntr iin songodoh bh
AmVideoType:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer(4), primary: true, autoincrement: true }
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(500), notnull: true }
    
AmVideo:
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(500) }
    user_id:              { type: integer }
    group_id:             { type: integer } 
    type_id:              { type: integer(4) }
    image:                { type: string(255) }
    small_image:          { type: string(255) }
    large_image:          { type: string(255) }
    source:               { type: string(500) }
    is_blocked:           { type: boolean }
    sort_order:           { type: integer(1) }
    access_id:            { type: integer(4) }
  relations:
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmVideos }
    AmGroup:              { local: group_id, foreign: id, foreignAlias: AmVideos }
    AmVideoType:          { local: type_id, foreign: id, foreignAlias: AmVideos }
    AmAccess:             { local: access_id, foreign: id }
  
AmComment: 
  actAs:
    Timestampable: ~
  columns:
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(500) }
    user_id:              { type: integer, notnull: true }
    group_id:             { type: integer }  
    object_type_id:       { type: integer(4) }
    object_id:            { type: integer } 
    like_count:           { type: integer(4) }
    dislike_count:        { type: integer(4) }
    is_blocked:           { type: boolean }
  relations:
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmComments }
    AmGroup:              { local: group_id, foreign: id, foreignAlias: AmComments }
    
AmAccess:
  actAs:
    Timestampable: ~
  columns:
    id:                   { type: integer(4), primary: true, autoincrement: true }
    name:                 { type: string(200), notnull: true }
    body:                 { type: string(500) }
    slug:                 { type: string(50) }




#message schema 
AmMail:
  actAs:
    Timestampable: ~
  columns:
    email_address:        { type: string(255), notnull: true }
    subsribe:             { type: boolean, default: true }
    ip_address:           { type: string(25), notnull: true }

AmMailbox:
  actAs:
    Timestampable: ~
  columns:
    user_id:              { type: integer }
    name:                 { type: string(255) } 
    unread_count:         { type: integer(4) }
    total_count:          { type: integer(4) }
  relations:
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmMailboxs }
  
AmThread:
  actAs:
    Timestampable: ~
  columns:
    created_user_id:      { type: integer, notnull: true }
    user_count:           { type: integer(4), default: 2 }
  relations:
    AmUsers:              { refClass: AmUserThreadConn, class: AmUser, local: thread_id, foreign: user_id }
    
AmUserThreadConn:
  actAs:
    Timestampable: ~
  columns:
    user_id:              { type: integer, primary: true }
    thread_id:            { type: integer, primary: true }
    is_blocked:           { type: boolean, default: false }
  relations:
    AmUser:               { local: user_id, foreignType: one, foreign: id }
    AmThread:             { local: thread_id, foreignType: one, foreign: id }
    
AmUserMessageConn:
  actAs:
    Timestampable: ~
  columns:
    user_id:              { type: integer, primary: true }
    message_id:           { type: integer, primary: true }
    is_blocked:           { type: boolean, default: false }
  relations:
    AmUser:               { local: user_id, foreignType: one, foreign: id }
    AmMessage:            { local: message_id, foreignType: one, foreign: id }
    
AmMessage:
  actAs:
    Timestampable: ~
  columns:
    created_user_id:      { type: integer, notnull: true }
    sended_user_count:    { type: integer(4), default: 1 }
    name:                 { type: string(255) }
    body:                 { type: string(255), notnull: true }
  relations:
    AmUsers:              { refClass: AmUserMessageConn, class: AmUser, local: message_id, foreign: user_id }
    
AmSmsLog:
  actAs:
    Timestampable: ~
  columns:
    mobile_number:        { type: string(100), notnull: true }
    message:              { type: string(500), notnull: true }
    sended_date:          { type: string() }
    activity_log_id:      { type: integer }




#shop schema
AmShopCategoryGroupConn:
  actAs:
    Timestampable: ~
  columns:
    group_id:             { type: integer, primary: true }
    shop_category_id:     { type: integer(4), primary: true }
    product_count:        { type: integer(4), default: 0 }
    created_user_id:      { type: integer }
  relations:
    AmUser:               { local: created_user_id, foreign: id }
    AmGroup:              { local: group_id, foreignType: one  }
    AmShopCategory:       { local: shop_category_id, foreignType: one }
    
AmShopCategory:
  actAs:
    Timestampable: ~
  columns:
    id:             { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    name:           { type: string(100), notnull: true }
    parent_id:      { type: integer(4) }
    sort_order:     { type: integer(1) }
    created_user_id:      { type: integer }
  relations:
    AmOptions:      { class: AmShopOption, refClass: AmShopCategoryOptionConn, local: category_id, foreign: option_id }
    AmParent:       { class: AmShopCateogry, local: parent_id, foreign: id, alias: Parent, foreignAlias: AmChilds }
    AmGroups:       { refClass: AmShopCategoryGroupConn, class: AmGroup, local: category_id, foreign: group_id } 
   
AmShopOption:
  actAs:
    Timestampable: ~
  columns:
    id:             { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    name:           { type: string(100), notnull: true }
    type:           { type: enum, values: ['selectbox', 'checkbox', 'textarea', 'input'] }
    sort_order:     { type: integer(1) }
  relations:
    AmShopCategories: { class: AmShopCategory, refClass: AmShopCategoryOptionConn, local: option_id, foreign: category_id }
    
AmShopOptionValue:
  actAs:
    Timestampable: ~
  columns:
    id:             { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    option_id:      { type: integer(4) }
    name:           { type: string(100), notnull: true }
    image_name:     { type: string(255) }
  relations:
    AmShopOption:   { class: AmShopOption, local: option_id, foreign: id, onDelete: cascade }
    AmShopProducts: { class: AmShopProduct, refClass: AmShopProductOptionValueConn, local: value_id, foreign: product_id }
    
AmShopCategoryGroupConn:
  actAs:
    Timestampable: ~
  columns:
    group_id:             { type: integer, primary: true }
    shop_category_id:     { type: integer(4), primary: true }
    product_count:        { type: integer(4), default: 0 }
    created_user_id:      { type: integer }
  relations:
    AmUser:               { local: created_user_id, foreign: id }
    AmGroup:              { local: group_id, foreignType: one  }
    AmShopCategory:       { local: shop_category_id, foreignType: one }
    
AmShopCategory:
  actAs:
    Timestampable: ~
  columns:
    id:             { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    name:           { type: string(100), notnull: true }
    parent_id:      { type: integer(4) }
    sort_order:     { type: integer(1) }
    created_user_id:      { type: integer }
  relations:
    AmOptions:      { class: AmShopOption, refClass: AmShopCategoryOptionConn, local: category_id, foreign: option_id }
    AmParent:       { class: AmShopCateogry, local: parent_id, foreign: id, alias: Parent, foreignAlias: AmChilds }
    AmGroups:       { refClass: AmShopCategoryGroupConn, class: AmGroup, local: category_id, foreign: group_id } 
   
AmShopOption:
  actAs:
    Timestampable: ~
  columns:
    id:             { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    name:           { type: string(100), notnull: true }
    type:           { type: enum, values: ['selectbox', 'checkbox', 'textarea', 'input'] }
    sort_order:     { type: integer(1) }
  relations:
    AmShopCategories: { class: AmShopCategory, refClass: AmShopCategoryOptionConn, local: option_id, foreign: category_id }
    
AmShopOptionValue:
  actAs:
    Timestampable: ~
  columns:
    id:             { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    option_id:      { type: integer(4) }
    name:           { type: string(100), notnull: true }
    image_name:     { type: string(255) }
  relations:
    AmShopOption:   { class: AmShopOption, local: option_id, foreign: id, onDelete: cascade }
    AmShopProducts: { class: AmShopProduct, refClass: AmShopProductOptionValueConn, local: value_id, foreign: product_id }
    
AmShopCategoryOptionConn:
  actAs:
    Timestampable: ~
  columns:
    category_id:    { type: integer(4), notnull: true, primary: true }
    option_id:      { type: integer(4), notnull: true, primary: true }
  relations:
    AmShopCategory:       { class: AmShopCategory, local: category_id, foreign: id, foreignAlias: AmShopCategoryOptions, onDelete: cascade }
    AmShopOption:         { class: AmShopOption, local: option_id, foreign: id, foreignAlias: AmShopCategoryOptions, onDelete: cascade }

AmShopProductOptionValueConn:
  actAs:
    Timestampable: ~
  columns:
    product_id:     { type: integer(4), primary: true }
    option_id:      { type: integer(4) }
    value_id:       { type: integer(4), primary: true }  
    quantity:       { type: integer(4) }
  relations:
    AmShopProduct:        { class: AmShopProduct, local: product_id, foreign: id, onDelete: cascade }
    AmShopOptionValue:    { class: AmShopOptionValue, local: value_id, foreign: id, onDelete: cascade }
    AmShopOption:         { class: AmShopOption, local: option_id, foreign: id }
    
AmShopProduct:
  actAs:
    Timestampable: ~
  columns:
    id:             { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    category_id:    { type: integer(4), notnull: true }
    user_id:        { type: integer }
    group_id:       { type: integer }
    title:          { type: string(100), notnull: true }
    content:        { type: string() }
    cover_photo_id: { type: integer(4) }
    price:          { type: float() }
    price_type:     { type: integer(4), default: 0 }
    phone:          { type: string(255) }
    email:          string(255)
    product_code:   { type: string(100) }
    is_active:      { type: boolean, default: true }
    is_featured:    { type: boolean, default: false }
    is_submit:      { type: boolean, default: false }
  relations:
    AmShopOptionValues:   { class: AmShopOptionValue, refClass: AmShopProductOptionValueConn, local: product_id, foreign: value_id }
    AmShopCategory:       { class: AmShopCategory, local: category_id, foreign: id }
    AmCoverPhoto:         { class: AmShopProductImage, local: cover_photo_id, foreign: id }
    AmUser:               { local: user_id, foreign: id, foreignAlias: AmShopProducts }
    AmGroup:              { local: group_id, foreignAlias: AmShopProducts }
    
AmShopProductImage: 
  actAs:
    Timestampable: ~
  columns:
    id:             { type: integer(4), unsigned: false, primary: true, autoincrement: true }
    product_id:     { type: integer(4), notnull: true }
    img_src:        { type: string(255), notnull: true }
    is_active:      { type: boolean, default: true }
    caption:        { type: string(100) }
  relations:
    AmShopProduct:        { class: AmShopProduct, local: product_id, foreign: id, foreignAlias: AmShopPhotos }
    
